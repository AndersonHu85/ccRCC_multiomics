library(dplyr)
library(ggplot2)
library(cowplot)
library(harmony)
library(Seurat)
library(ggplot2)
library(cowplot)
library(ggsci)
library(Rcpp)
library(RColorBrewer)
library(tidyr)
options(stringsAsFactors = F)

merge@meta.data$nUMI <- merge@meta.data$nCount_RNA
merge@meta.data$nGene <- merge@meta.data$nFeature_RNA


mito.genes <- grep(
  pattern = "^MT-",
  x = rownames(x = merge@assays$RNA@data),
  value = TRUE)

percent.mito <- Matrix::colSums(merge@assays$RNA@counts[mito.genes, ]) / Matrix::colSums(merge@assays$RNA@counts)

merge <- AddMetaData(
  object = merge,
  metadata = percent.mito,
  col.name = "percent.mito")
VlnPlot(merge, c("nUMI","nGene","percent.mito"), group.by = "sample",pt.size = 0)

merge <- subset(merge, subset = percent.mito < 0.05)
merge <- subset(merge, subset = n_genes > 500)
merge <- subset(merge, subset = nUMI > 1000)

merge <- NormalizeData(merge)

merge <- FindVariableFeatures(merge, nfeatures = 2000)
VariableFeaturePlot(merge)
merge <- ScaleData(merge, verbose = T)
merge <- RunPCA(merge, npcs = 50, verbose = FALSE)
PCAPlot(merge,cols=celltype)
ElbowPlot(merge, ndims = 50)
merge <- RunHarmony(merge, c("sample"),max.iter.harmony = 50)
merge <- FindNeighbors(merge, reduction = "harmony", dims = 1:50, do.plot = T)
merge <- FindClusters(merge, resolution = 1)

merge  <- RunUMAP(merge, reduction = "harmony", dims = 1:50, n.components = 2)

p1 <- DimPlot(merge, reduction = "umap", group.by = "RNA_snn_res.1", label = TRUE)+ NoLegend()
p2 <- DimPlot(merge, reduction = "umap", group.by = "sample", pt.size = 0.4,
              label = TRUE,raster = T) + NoLegend()
plot_grid(p2,p1)

merge <- CellCycleScoring(merge, g2m.features = cc.genes$g2m.genes,
                               s.features = cc.genes$s.genes)

meta <- merge@meta.data
column <- as.data.frame(table(meta$sample, meta$celltype2))
colnames(column) <- c("sample","celltype2","Freq")

column$group2 <- plyr::mapvalues(x = column$Var1, 
                                 from = rownames(cluster_info2), 
                                 to = cluster_info2$class)
                                 
column$group2 <- as.character(column$group2)

p1 <- ggplot(column,aes(sample,weight=Freq,fill=celltype2))+geom_bar(position="fill")+#coord_flip()+
  theme(panel.grid.major =element_blank(), 
        panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(colour = "black")) + 
  scale_fill_manual(values = c(celltype)) 
p1 +  facet_grid(~group2,scales = "free", space = "free") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        #axis.line = element_line(colour = "black",size=1), 
        #axis.ticks = element_line(size = 1, color="black"),
        axis.ticks.length = unit(.2, "cm"))


####################infercnv analysis##################
library(infercnv)

gtf1 <- rtracklayer::import('./Homo_sapiens.GRCh38.87.chr.gtf')
gtf_df <- as.data.frame(gtf1)
gtf_df <- gtf_df[,c(1:3,12)]
seq <- as.character(gtf_df$seqnames)
seq <- paste("chr",seq,sep = "")
gtf_df$seqnames <- seq
gtf_df <- na.omit(gtf_df)
gtf_df <- gtf_df[!duplicated(gtf_df[,4]),]
gene <- merge@assays[["RNA"]]@data@Dimnames[[1]]
gtf_df <- gtf_df[gtf_df$gene_name %in% gene,]
rownames(gtf_df) <- gtf_df$gene_name
gtf_df <- gtf_df[,1:3]
gtf_df <- gtf_df[gtf_df$seqnames != "chrMT",]


control  <- normal[,normal$celltype=="Epithelial"]
control@meta.data$cnv_group <- "control"
Epi_sub <- merge[,merge$celltype=="Epithelial"]
Epi_sub$cnv_group <- Epi_sub$sample
Epi_cnv <- merge(control, Epi_sub)

matrix <- Epi_cnv@assays$RNA@counts
meta <- Epi_cnv@meta.data
meta2 <- as.data.frame(meta$cnv_group)
rownames(meta2) <- rownames(meta)
colnames(meta2) <- "cnv_group"

infercnv_obj = CreateInfercnvObject(raw_counts_matrix=matrix,
                                    annotations_file=meta2,
                                    delim="\t",
                                    gene_order_file=gtf_df,
                                    ref_group_names=c("control")) 

dir="./inferCNV"
gtf_df$seqnames <- as.factor(gtf_df$seqnames)
infercnv_obj = infercnv::run(infercnv_obj,
                             cutoff=0.1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
                             out_dir= dir, 
                             cluster_by_groups=TRUE, 
                             denoise=TRUE,
                             num_threads = 20,
                             HMM=F,
                             no_plot = T)####visualization was the same as that of ST data



########processing Epithelial cells alone#################
Epi <- merge[,merge$celltype=="Epithelial"]
Epi <- NormalizeData(Epi)

Epi <- FindVariableFeatures(Epi, nfeatures = 2000)
VariableFeaturePlot(Epi)
Epi <- ScaleData(Epi, verbose = T)
Epi <- RunPCA(Epi, npcs = 50, verbose = FALSE)
PCAPlot(Epi)
ElbowPlot(Epi, ndims = 50)
Epi <- RunHarmony(Epi, c("sample"),max.iter.harmony = 50)
Epi <- FindNeighbors(Epi, reduction = "harmony", dims = 1:30, do.plot = T)
Epi <- FindClusters(Epi, resolution = 1)

Epi  <- RunUMAP(Epi, reduction = "pca", dims = 1:30, n.components = 2)

library(destiny)

dm <- DiffusionMap(Epi@reductions$harmony@cell.embeddings[,1:15],k = 3,n_pcs = NA, verbose = TRUE, n_eigs=2)
plot(dm)

#####################trajectory######################
library(monocle3)
featureData <- as.data.frame(Epi@assays$RNA@counts@Dimnames[[1]])
colnames(featureData) <- "gene_short_name"

rownames(featureData) <- featureData[,1]
cds <- new_cell_data_set((Epi@assays$RNA@data),
                         cell_metadata = Epi@meta.data,
                         gene_metadata = featureData)
cds

cds@int_colData@listData[["reducedDims"]]@listData[["PCA"]] <- as.matrix(Epi_sub@reductions[["pca"]]@cell.embeddings)
cds@int_colData@listData[["reducedDims"]]@listData[["Aligned"]] <- as.matrix(Epi@reductions[["harmony"]]@cell.embeddings)

cds@int_colData@listData[["reducedDims"]]@listData[["UMAP"]] <- as.matrix(Epi@reductions[["umap"]]@cell.embeddings)
cds@int_colData@listData[["reducedDims"]]@listData[["UMAP"]][,1] <- PHATE$DC1*100
cds@int_colData@listData[["reducedDims"]]@listData[["UMAP"]][,2] <- PHATE$DC2*100

cds <- cluster_cells(cds)
plot_cells(cds, color_cells_by = c("partition"))

cds <- learn_graph(cds,close_loop=F)
plot_cells(cds,show_trajectory_graph=T,
           group_label_size = 4,
           color_cells_by = "sample",
           cell_size = 0.7,
           label_cell_groups=FALSE,
           label_groups_by_cluster=FALSE,
           label_leaves=FALSE,
           label_branch_points=FALSE) + scale_color_manual(values = celltype)
cds <- order_cells(cds)
plot_cells(cds,show_trajectory_graph=T,
           color_cells_by = "pseudotime",
           label_cell_groups=FALSE,
           label_leaves=FALSE,
           cell_size = 0.7,
           label_branch_points=FALSE,
           graph_label_size=1.5)

Epi$pseudotime <- cds@principal_graph_aux@listData[["UMAP"]][["pseudotime"]]


##############draw pseudotime heatmap of trajectory############
library(monocle)
library(scater, quietly = TRUE)
library(knitr)
library(Biobase)
options(stringsAsFactors = FALSE)

seq <- seq(from=1,to=ncol(Epi),by=7)
metadata <- Epi@meta.data[seq,]
featureData <- as.data.frame(Epi@assays$RNA@counts@Dimnames[[1]])
rownames(featureData) <- featureData[,1]
pd <- new("AnnotatedDataFrame", data = metadata)
fd <- new("AnnotatedDataFrame", data = featureData)

monocle <- new("CellDataSet", exprs=as.matrix(Epi_sub@assays$RNA@data), phenoData = pd,
               expressionFamily = negbinomial(),lowerDetectionLimit=0.1)
monocle

monocle <- estimateSizeFactors(monocle)
monocle <- estimateDispersions(monocle)

TF_final <- read.csv("./TF_final.csv")

newdata <- data.frame(Pseudotime = seq(min(monocle$pseudotime), 
                                       max(monocle$pseudotime), length.out = 1000))
cds_Epi_subset <- monocle[c(unique(TF_final$symbol)),]
genSmoothCurves_mat<-genSmoothCurves(cds_Epi_subset,
                                     new_data = newdata,
                                     trend_formula = "~sm.ns(pseudotime, df = 3)",
                                     cores = 1)
order <- order(monocle2$pseudotime,decreasing = F)

heat <- Heatmap(t(scale(t(genSmoothCurves_mat[,order]))), 
        col = colorRamp2(seq(-2,2,length.out = 11),cols),
        cluster_rows = T,
        cluster_columns = F,
        show_column_names = F,
        show_row_names = T,
        use_raster=F,
        border = NA,
        show_row_dend = T,
        na_col = "grey85",
        #smooth = TRUE,
        clustering_method_rows = "ward.D",
        column_gap = unit(1, "mm"),
        row_gap = unit(0, "mm"),
        row_dend_width = unit(20, "mm"),
        column_title = NULL) )
heat


